generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? // ‚Üê ADD THIS FIELD
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Your app relations
  schedules     ExerciseSchedule[]
  betsPlaced    Bet[] @relation("BetPlacer")
  betsReceived  Bet[] @relation("BetTarget")
  notifications Notification[]
  
  @@map("users")
}

model ExerciseSchedule {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  exerciseType String
  timeSlot    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bets Bet[]

  @@unique([userId, date, timeSlot])
}

model Bet {
  id          String     @id @default(cuid())
  placerId    String
  targetId    String
  scheduleId  String
  amount      Int        @default(100)
  prediction  Boolean
  status      BetStatus  @default(ACTIVE)
  result      BetResult?
  createdAt   DateTime   @default(now())
  resolvedAt  DateTime?

  placer   User             @relation("BetPlacer", fields: [placerId], references: [id])
  target   User             @relation("BetTarget", fields: [targetId], references: [id])
  schedule ExerciseSchedule @relation(fields: [scheduleId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum BetStatus {
  ACTIVE
  RESOLVED
  CANCELLED
}

enum BetResult {
  WON
  LOST
}

enum NotificationType {
  BET_WON
  BET_LOST
  PAYMENT_DUE
  NEW_BET_PLACED
  EXERCISE_REMINDER
}